<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- 
        三种写法：
            1.行内样式
            2.内嵌样式
            3.外链样式
        
        显示数据：
            三种弹窗方式：
                1.alert         只能输出一个警告窗口
                2.confirm       输出的框有确定和取消，会返回一个布尔类型
                3.prompt        var a = prompt('显示的输入框外的提示', '显示的时输入框内的提示');
            通过网页内容区域输出：document.write()      会清空之前的内容
            通过开发工具：console.log()          普通输出
                        console.warn()         警告输出
                        console.error()        错误输出
            注意：如果输出的内容不是数字，内容就要用单引号或者双引号括起来

        常量与变量：
            1.什么是常量?
                常量表示一些固定不变的数据
                现实生活中人的性别其实就可以看做是常量, 生下来是男孩一辈子都是男孩, 生下来是女孩一辈子都是女孩

            2.JavaScript中常量的分类
            2.1整型常量
                整型常量其实就是正数, 在JavaScript中随便写一个整数都是整型常量
                1   /   666  /    99

            2.2实型常量
                实型常量其实就是小数, 在JavaScript中随便写一个小数都是实型常量
                3.14   6.66

            2.3字符串常量
                字符串常量其实就是用单引号或者双引号括起来的内容, 我们就称之为字符串常量
                'a'
                'abc'
                "1"
            注意点: 无论用单引号或者双引号括起来了多少个字符, 在JavaScript中都是字符串常量

            2.4布尔常量
                布尔常量其实就是真或者假, 在JavaScript中通过true和false来表达
                在JavaScript中布尔常量只有两个取值, 真(true)或者假(false)

            2.5自定义常量
            在ES6中新增的
                const 常量名称 = 常量取值;

            3.什么是变量?
                变量表示一些可以被修改的数据
                在现实生活中超市的储物格就是变量, 在不同的时间段里面, 储物格中存储的数据也不一样

            4.如何定义一个变量
                在JavaScript中可以通过定义变量的方式来生成储物格, 也就是告诉浏览器, 我们需要一块内存空间
                var 变量名称;

            5.如何使用变量
                使用变量就是往申请的那块内存空间中存储数据, 和获取存储的数据
            5.1如何存储数据
                变量名称 = 需要存储的数据;
                可以将等号右边需要存储的数据放到等号左边变量申请的那块存储空间中
            5.2如何获取存储在变量中的数据
                变量名称

            /*
                1.注意点
                1.在JavaScript中变量之间是可以相互赋值的
                2.在JavaScript中如果定义了同名的变量, 那么后定义的变量会覆盖先定义的变量
                3.在老版本的标准的(ES6之前)JavaScript中可以先使用变量, 再定义变量, 并不会报错
                由于JavaScript是一门解释型的语言, 会边解析边执行, 浏览器在解析JavaScript代码之前还会进行一个操作"预解析(预处理)"
                预解析(预处理)步骤:
                将当前JavaScript代码中所有变量的定义和函数的定义放到所有代码的最前面
            */


            /*
                为了解决老板标准的的两个注意点
                1.在JavaScript中如果定义了同名的变量, 那么后定义的变量会覆盖先定义的变量
                2.在老版本的标准的(ES6之前)JavaScript中可以先使用变量, 再定义变量, 并不会报错
                在ES6中就推出了一种新的定义变量的方式

                格式:
                ES6之前: var 变量名称;
                ES6开始: let 变量名称;

                let 不能重复定义，并且只能先定义后使用

                ES6新增了常量的定义：const A = 1;
                不能对常量的地址进行改变，但是可以对const对象进行改变

            */
            
            关键字
            /*
                什么是关键字？
                被JavaScript语言赋予了特殊含义的单词
                关键字在开发工具中会显示特殊颜色
                关键字不能用作变量名、函数名等
                关键字严格区分大小写, var和Var前者是关键字, 后者不是
                只需要记住一点: 在JavaScript中所有的关键字都是小写的
            */

            /*
                标识符命名规则(必须遵守)
                只能由26个英文字母的大小写、10个阿拉伯数字0~9、下划线_、美元符号$组成
                不能以数字开头
                严格区分大小写，比如test和Test是2个不同的标识符
                不可以使用关键字、保留字作为标识符
            */

            注释:与Java同样
            分支循环:与Java同样
        数组
            数组解构赋值
                解构赋值是ES6中新增的一种赋值方式
            增：
                在数组前面增加：
                    arr.unshift()
                数组尾增加
                    arr.push()
            删：
                arr.shift()
                arr.pop()
                arr.splice(index,size)
            改：
                arr[1] = 'a'
            查：
                arr[i]

            清空数组：
                arr.length = 0
                arr=[]
                arr.splice(0,arr.length)
                
            将数组转化为字符串：
                arr.toString()
            如何将数组转换成指定格式字符串
                join方法默认情况下如果没有传递参数, 就是调用toString();
                join方法如果传递了参数, 就会将传递的参数作为元素和元素的连接符号
                let str =  arr.join("+");
            
            拼接：
                利用数组解构进行拼接：
                let res = [...arr1, ...arr2];   
            反转：
                arr.reverse()
            
            获取数组指定范围的内容
                arrr.slice(1,2) 左开右闭
            查找指定元素：
                indexOf() lastIndexOf()
         
        函数：
            定义格式:
                1.function name(a,b...){

                }
                2.a = function(a,b...){

                }

            基本概率与Java类似
            
            箭头函数：
                1.什么是箭头函数?
                箭头函数是ES6中新增的一种定义函数的格式
                目的: 就是为了简化定义函数的代码
                let arr = new Array();
                let arr = [];

                2.在ES6之前如何定义函数
                function 函数名称(形参列表){
                    需要封装的代码;
                }
                let 函数名称 = function(形参列表){
                    需要封装的代码;
                }

                3.从ES6开始如何定义函数
                let 函数名称 = (形参列表) =>{
                    需要封装的代码;
                }

                4.箭头函数的注意点
                4.1在箭头函数中如果只有一个形参, 那么()可以省略
                4.2在箭头函数中如果{}中只有一句代码, 那么{}也可以省略

                变量作用域
                    /*
                    1.在JavaScript中定义变量有两种方式
                    ES6之前: var 变量名称;
                    ES6开始: let 变量名称;
                    */
                    // 2.两种定义变量方式的区别
                    // 2.1是否能够定义同名变量
                    /*
                    1.通过var定义变量,可以重复定义同名的变量,并且后定义的会覆盖先定义的
                    var num = 123;
                    var num = 456;
                    console.log(num);

                    2.2如果通过let定义变量,  "相同作用域内"不可以重复定义同名的变量
                    let num = 123;
                    let num = 456; // 报错
                    */

                    // 2.2是否能够先使用后定义
                    /*
                    2.3通过var定义变量, 可以先使用后定义(预解析)
                    console.log(num);
                    var num = 123;

                    2.4通过let定义变量, 不可以先使用再定义(不会预解析)
                    console.log(num); // 报错
                    let num = 123;
                    */

                    // 2.3是否能被{}限制作用域
                    /*
                    2.5无论是var还是let定义在{}外面都是全局变量
                    var num = 123;
                    let num = 123;

                    2.6将var定义的变量放到一个单独的{}里面, 还是一个全局变量
                    {
                        var num = 123;
                    }
                    console.log(num);  //不会报错

                    2.7将let定义的变量放到一个单独的{}里面, 是一个局部变量
                    {
                        let num = 123;
                    }
                    console.log(num);  //会报错
                    */

                    /*
                    1.在JavaScript中{}外面的作用域, 我们称之为全局作用域

                    2.在JavaScript中函数后面{}中的的作用域, 我们称之为"局部作用域"
                    3.在ES6中只要{}没有和函数结合在一起, 那么应该"块级作用域"
                    4.块级作用域和局部作用域区别
                    4.1在块级作用域中通过var定义的变量是全局变量
                    4.2在局部作用域中通过var定义的变量是局部变量

                    5.无论是在块级作用域还是在局部作用域, 省略变量前面的let或者var就会变成一个全局变量
                    */
                    /*
                    {
                        // 块级作用域
                    }
                    if(false){
                        // 块级作用域
                    }
                    while (false){
                        // 块级作用域
                    }
                    for(;;){
                        // 块级作用域
                    }
                    do{
                        // 块级作用域
                    }while (false);
                    switch () {
                        // 块级作用域
                    }
                    function say() {
                        // 局部作用域
                    }
                    */

                    /*
                    {
                        // 块级作用域
                        var num = 123; // 全局变量
                    }
                    console.log(num);

                    function test() {
                        var value = 666; // 局部变量
                    }
                    test();
                    console.log(value);
                    */
                    /*
                    if(true){
                        var num = 666;
                    }
                    console.log(num);
                    */

                    /*
                    {
                        // var num = 678; // 全局变量
                        // let num = 678; // 局部变量
                        num = 678; // 全局变量
                    }
                    console.log(num);
                    */            
        
        预解析：
            1.什么是预解析?
            浏览器在执行JS代码的时候会分成两部分操作：预解析以及逐行执行代码
            也就是说浏览器不会直接执行代码, 而是加工处理之后再执行,
            这个加工处理的过程, 我们就称之为预解析

            2.预解析规则
            2.1将变量声明和函数声明提升到当前作用域最前面
            2.2将剩余代码按照书写顺序依次放到后面

            3.注意点
            通过let定义的变量不会被提升(不会被预解析)

            

     -->
</body>
</html>